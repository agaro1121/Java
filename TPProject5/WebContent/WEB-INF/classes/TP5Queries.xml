<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">

<properties>
	<comment>Phase 5 Queries</comment>

	<entry key="user">SELECT * FROM USERS WHERE username = ?</entry>
	<entry key="isSEManager">SELECT type
		FROM users u
		JOIN user_type_bridge utb ON
		u.user_id = utb.user_id
		JOIN user_type ut ON ut.type_id = utb.type_id
		WHERE utb.type_id=3 and u.username = ?
	</entry>
	<entry key="allTrades">SELECT * FROM trade WHERE stock_ex_id = ?</entry>
	<entry key="tradesBySH">
		SELECT * FROM trade
		WHERE (buyer_id = ? OR seller_id =
		?) AND stock_ex_id = ?
		ORDER BY trade_id
	</entry>
	<entry key="allSHRequests"> SELECT user_id,firstname||' '||lastname AS name
		FROM
		users
		WHERE user_id IN (SELECT u.user_id from users u
		JOIN
		user_type_bridge utb on u.user_id = utb.user_id
		WHERE isverified =
		'false'AND utb.type_id = 4)
		ORDER BY user_id
	</entry>
	<entry key="allBrokerRequests">SELECT user_id,firstname||' '||lastname AS name
		FROM
		users
		WHERE user_id IN (SELECT u.user_id from users u
		JOIN
		user_type_bridge utb on u.user_id = utb.user_id
		JOIN user_type ut ON
		ut.type_id = utb.type_id
		where isverified = 'false'AND utb.type_id = 2
		UNION
		select user_id FROM user_request
		WHERE lower(description) LIKE
		'%become broker%')
		ORDER BY user_id
	</entry>
	<entry key="sharesHeld">
		SELECT t.buyer_id AS
		user_id,u.firstname||'
		'||u.lastname AS Name,t.stock_id,
		l.stock_symbol, c.name as company,
		x.symbol as exchange_symbol,
		SUM(case when buyer_id = ? then shares
		else -1 * shares end) as
		shares_held
		FROM trade t
		JOIN company c ON
		t.stock_id = c.stock_id
		JOIN stock_listing l ON l.stock_id = t.stock_id
		JOIN stock_exchange x ON x.stock_ex_id = l.stock_ex_id
		JOIN users u ON
		u.user_id = t.buyer_id
		WHERE (buyer_id = ? or seller_id =
		?) AND
		t.stock_ex_id = ?
		GROUP BY t.stock_id, l.stock_symbol, c.name,
		x.symbol,t.buyer_id,t.seller_id,u.firstname||'
		'||u.lastname,t.buyer_id
		HAVING SUM(case when buyer_id = ? then shares
		else -1 * shares end) > 0
		ORDER BY t.stock_id
	</entry>
	<entry key="userStockExID">
		SELECT stock_ex_id FROM users u
		JOIN stock_exchange se
		ON u.user_id = se.manager_id
		WHERE u.user_id = ?
	</entry>
	<entry key="tradesByBroker">
		SELECT
		transaction_time,c.name,shares,price_total,t.buy_broker_id,t.sell_broker_id
		from trade t
		JOIN company c ON c.stock_id = t.stock_id
		WHERE
		(buy_broker_id = ? OR
		sell_broker_id = ?) AND t.stock_ex_id = ?
		ORDER BY
		transaction_time
	</entry>
	<entry key="shByStockExID">
		SELECT sex.user_id, u.firstname||' '||u.lastname AS
		Name
		FROM shareholder_stock_ex sex
		JOIN users u ON u.user_id =
		sex.user_id
		WHERE sex.status = 'active' AND
		sex.stock_ex_id = ?
	</entry>
	<entry key="suspendedSHByStockExID">
		SELECT sex.user_id, u.firstname||' '||u.lastname AS
		Name
		FROM
		shareholder_stock_ex sex
		JOIN users u ON u.user_id =
		sex.user_id
		WHERE sex.status = 'suspended' AND
		sex.stock_ex_id = ?
	</entry>
	<entry key="SHStatus">
		UPDATE shareholder_stock_ex SET status = ? WHERE
		(user_id = ? and
		stock_ex_id = ?)
	</entry>
	<entry key="brokerByStockExID">
		SELECT u.user_id, u.firstname||' '||u.lastname AS Name
		FROM broker_stock_ex sex
		JOIN users u ON u.user_id = sex.broker_id
		WHERE sex.status = 'active' AND sex.stock_ex_id = ?
	</entry>
	<entry key="suspendedBrokerByStockExID">
		SELECT u.user_id, u.firstname||' '||u.lastname AS Name
		FROM broker_stock_ex
		sex
		JOIN users u ON u.user_id = sex.broker_id
		WHERE
		sex.status = 'suspended'
		AND sex.stock_ex_id = ?
	</entry>
	<entry key="bStatus">
		UPDATE broker_stock_ex SET status = ? WHERE (broker_id
		= ? and stock_ex_id =
		?)
	</entry>
	<entry key="bNSH">
		SELECT user_id FROM broker_stock_ex b
		JOIN
		shareholder_stock_ex s ON b.broker_id=s.user_id AND b.stock_ex_id =
		s.stock_ex_id
		WHERE b.status = 'active' AND s.status = 'active' and
		s.stock_ex_id = ?
	</entry>
	<entry key="allTradesByBSH">
		select * from
		(
		SELECT
		transaction_time,c.name,shares,price_total,t.buy_broker_id,t.sell_broker_id
		from trade t
		JOIN company c ON c.stock_id = t.stock_id
		WHERE
		t.stock_ex_id = ? AND
		buy_broker_id IN (SELECT user_id FROM
		broker_stock_ex b
		JOIN shareholder_stock_ex s ON b.broker_id=s.user_id
		AND b.stock_ex_id =
		s.stock_ex_id
		WHERE b.status = 'active' AND s.status
		= 'active' and s.stock_ex_id = ?)
		UNION
		SELECT
		transaction_time,c.name,shares,price_total,t.buy_broker_id,t.sell_broker_id
		from trade t
		JOIN company c ON c.stock_id = t.stock_id
		WHERE
		t.stock_ex_id = ? AND
		sell_broker_id IN (SELECT user_id FROM
		broker_stock_ex b
		JOIN shareholder_stock_ex s ON b.broker_id=s.user_id
		AND b.stock_ex_id =
		s.stock_ex_id
		WHERE b.status = 'active' AND s.status
		= 'active' and s.stock_ex_id = ?)
		)
		order by
		buy_broker_id,sell_broker_id
	</entry>
	<entry key="tradesByBSH">
		SELECT * FROM(
		SELECT DISTINCT
		transaction_time,c.name,shares,price_total,t.buy_broker_id,t.sell_broker_id
		from trade t
		JOIN company c ON c.stock_id = t.stock_id
		JOIN
		broker_stock_ex b ON t.stock_ex_id = b.stock_ex_id
		WHERE t.stock_ex_id
		= ? AND buy_broker_id = ? and b.status = 'active'
		UNION
		SELECT DISTINCT
		transaction_time,c.name,shares,price_total,t.buy_broker_id,t.sell_broker_id
		from trade t
		JOIN company c ON c.stock_id = t.stock_id
		JOIN
		broker_stock_ex b ON t.stock_ex_id = b.stock_ex_id
		WHERE t.stock_ex_id
		= ? AND sell_broker_id = ? and b.status = 'active'
		)
	</entry>
	<entry key="listedCompanies">
		SELECT DISTINCT p.stock_id, c.name,
		l.stock_symbol,s.starting_price,p.price
		AS current_price
		FROM
		stock_price p
		JOIN stock_listing l ON l.stock_id = p.stock_id AND
		p.stock_ex_id =
		l.stock_ex_id
		JOIN company c ON c.stock_id = p.stock_id
		JOIN shares_issued s ON s.stock_id = p.stock_id
		WHERE p.time_end IS
		NULL AND l.status = 'listed' AND p.stock_ex_id = ?
		ORDER BY p.stock_id
	</entry>
	<entry key="deListedCompanies">
		SELECT DISTINCT p.stock_id, c.name,
		l.stock_symbol,s.starting_price,p.price
		AS current_price
		FROM
		stock_price p
		JOIN stock_listing l ON l.stock_id = p.stock_id AND
		p.stock_ex_id =
		l.stock_ex_id
		JOIN company c ON c.stock_id = p.stock_id
		JOIN shares_issued s ON s.stock_id = p.stock_id
		WHERE p.time_end IS
		NULL AND l.status = 'delisted' AND p.stock_ex_id = ?
		ORDER BY
		p.stock_id
	</entry>
	<entry key="cStatus">
		UPDATE stock_listing SET status = ? WHERE stock_id = ?
		AND stock_ex_id = ?
	</entry>
	<entry key="SHToBeApproved">
		SELECT u.user_id,u.firstname||' '||u.lastname AS Name
		FROM users u
		JOIN user_type_bridge utb ON utb.user_id = u.user_id
		JOIN
		user_type ut ON ut.type_id=utb.type_id
		WHERE u.isverified = 'true' AND
		utb.type_id = 4 AND u.user_id NOT IN
		(SELECT user_id FROM
		shareholder_stock_ex WHERE stock_ex_id = ?)
		ORDER BY u.user_id
	</entry>
	<entry key="SHToBeDenied">
		SELECT u.user_id,u.firstname||' '||u.lastname AS Name
		FROM users u
		JOIN user_type_bridge utb ON utb.user_id = u.user_id
		JOIN
		user_type ut ON ut.type_id=utb.type_id
		WHERE u.isverified = 'true' AND
		utb.type_id = 4 AND u.user_id NOT IN
		(SELECT user_id FROM
		shareholder_stock_ex WHERE stock_ex_id = ?)
		ORDER BY u.user_id
	</entry>
	<entry key="approveDenySH">INSERT INTO shareholder_stock_ex VALUES (?,?,?)</entry>
	<entry key="BrokersToBeDenied">
		SELECT u.user_id,u.firstname||' '||u.lastname AS Name
		FROM users u
		JOIN user_type_bridge utb ON utb.user_id = u.user_id
		JOIN
		user_type ut ON ut.type_id=utb.type_id
		WHERE u.isverified = 'true' AND
		utb.type_id = 2 AND u.user_id NOT IN
		(SELECT broker_id FROM
		broker_stock_ex WHERE stock_ex_id = ?)
		ORDER BY u.user_id
	</entry>
	<entry key="BrokersToBeApproved">
		SELECT u.user_id,u.firstname||' '||u.lastname AS Name
		FROM users u
		JOIN user_type_bridge utb ON utb.user_id = u.user_id
		JOIN
		user_type ut ON ut.type_id=utb.type_id
		WHERE u.isverified = 'true' AND
		utb.type_id = 2 AND u.user_id NOT IN
		(SELECT broker_id FROM
		broker_stock_ex WHERE stock_ex_id = ?)
		ORDER BY u.user_id
	</entry>
	<entry key="approveDenyB">INSERT INTO broker_stock_ex VALUES (?,?,?)</entry>
	<entry key="currDeniedB">
		SELECT b.broker_id,u.firstname||' '||u.lastname AS
		name
		FROM broker_stock_ex b
		JOIN users u ON u.user_id=b.broker_id
		WHERE
		b.status = 'denied'
	</entry>
	<entry key="currDeniedSH">
		SELECT b.user_id,u.firstname||' '||u.lastname AS name
		FROM shareholder_stock_ex b
		JOIN users u ON u.user_id=b.user_id
		WHERE
		b.status = 'denied'
	</entry>
	<entry key="sharesIssued">
		SELECT
		s.stock_id,l.stock_symbol,c.name,s.time_start,s.time_end,s.issued,s.starting_price
		FROM shares_issued s
		JOIN stock_listing l ON s.stock_id = l.stock_id
		JOIN company c ON c.stock_id = l.stock_id
		WHERE l.stock_ex_id = ?
		ORDER
		BY s.stock_id,s.time_start
	</entry>

	<entry key="updatePriceA">UPDATE shares_issued SET time_end = sysdate WHERE
		stock_id = ? AND time_end IS NULL</entry>
	<entry key="updatePriceB">
		INSERT INTO shares_issued
		(stock_id,currency_id,issued)
		(select stock_id,currency_id,issued from
		shares_issued where stock_id = ? and
		time_end =
		( select Max(time_end)
		from shares_issued where stock_id = ?))
	</entry>
	<entry key="updatePriceC">UPDATE shares_issued SET starting_price = ?,time_start
		= sysdate WHERE stock_id = ? AND time_end is null</entry>

	<entry key="updateAmountA">UPDATE shares_issued SET time_end = sysdate WHERE
		stock_id = ? AND time_end IS NULL</entry>
	<entry key="updateAmountB">
		INSERT INTO shares_issued
		(stock_id,currency_id,starting_price)
		(select stock_id,currency_id,starting_price from shares_issued where stock_id
		= ? and time_end =
		( select Max(time_end) from shares_issued where stock_id = ?))
	</entry>
	<entry key="updateAmountC">UPDATE shares_issued SET issued = ?,
		time_start=sysdate WHERE stock_id = ? AND time_end is null</entry>
	<entry key="resetPassword">UPDATE users SET password = ? WHERE user_id = ?</entry>
	<entry key="getUserByType">
		SELECT
		u.user_id ID,
		u.firstname ||' '||
		u.lastname Name
		FROM users u
		JOIN user_type_bridge utb
		ON
		utb.user_id=u.user_id
		WHERE
		utb.type_id = ?
		ORDER BY utb.user_id
	</entry>
	<entry key="submitRequest" >INSERT INTO user_request VALUES (?,?,?,?,?)</entry>
	<entry key="chooseTheme">UPDATE users SET theme = ? WHERE user_id = ?</entry>
</properties>