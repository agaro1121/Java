Must have requirements:
•	Add Users
	- 1. User Registers 2. Admin Approves
	
•	Remove Users
	-Memento Pattern for undo?
	
•	User Permissions/Groups
	-Permissions Determine which commands user can take?
	-Mediator pattern?
	
•	Logs/Audit trail
	-Who is doing the logging?
	-What am I logging?
	-How many log files will I need?
	-Where do I store them?
	
•	User Registration
	-Facade Pattern?


Should have
•	Update Details
•	Ban Users
	-Memento Pattern for undo?
•	Broker, Shareholder, Guest Roles/Permissions
•	Request upgrade to change role
•	Flat file Key Value pair or xml storage
	-Singleton

 IMPORTANT::Research design patterns and see how they fit into trading platform or even if they're necessary?
 			-Command - all commands
 			-Mediator - I don't know. Figure it out ! - can be invoker?
 			-Facade - For registration. Can take user input and instantiate new user class and pass in information
<<<<<<< .mine
 			-Singleton - Storage
 			
 			
 Interfaces
 
 View
 -setController()
 -Run()
 -display()
 
 Controller
 -execute()
 -getInfo()
 
 Model
 -execute()
 -setInfo()?=======
 			-Singleton - Storage
 			
 Class c = class.forName("AddUser" actionname)
action(command) = c.New Instance
return action


create map from XML

JDBC

TODAY:
-Permissions(status)
	-Change All XML parsing
	-When user logs in, ArrayList<Users> is checked for status string(tokenized ":" Broker:ShareHolder:Admin)
-Appropriate Screen based on permissions
-Add User
	-Verification?
-Logs
-Add User>>>>>>> .r79
